description 'ICEpdf core library jar project'

def sectionName = 'org/icepdf/core/'
def baseJarName = 'icepdf'
def baseAppendixName = 'core'

repositories {
    mavenCentral()
}

dependencies {
    // signature validation.
    implementation 'org.bouncycastle:bcprov-jdk15on:' + "${BOUNCY_VERSION}"
    implementation 'org.bouncycastle:bcprov-ext-jdk15on:' + "${BOUNCY_VERSION}"
    implementation 'org.bouncycastle:bcpkix-jdk15on:' + "${BOUNCY_VERSION}"
    // tiff, jpeg2000 and jbig decoding
    implementation 'com.twelvemonkeys.imageio:imageio-tiff:'  + "${MONKEY_VERSION}"
//    implementation 'com.github.jai-imageio:jai-imageio-jpeg2000:' + "${JAI_VERSION}"
    implementation 'org.apache.pdfbox:jbig2-imageio:' + "${JBIG2_VERSION}"

}

// generatePomFileForCoreJarPublication
publishing {
    publications {
        coreJar(MavenPublication) {
            from components.java
            afterEvaluate {
                groupId 'org.icepdf.os'
                artifactId 'icepdf-core'
                version "${VERSION + (RELEASE_TYPE?.trim()? '-' + RELEASE_TYPE:'')}"
                pom.withXml {
                    asNode().appendNode('description', 'ICEpdf core rendering library.')
                    asNode().appendNode('url', 'https://github.com/pcorless/icepdf')
                    asNode().appendNode('scm')
                            .appendNode('connection', 'scm:git:https://github.com/pcorless/icepdf').parent()
                            .appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt').parent()
                            .appendNode('tag', 'icepdf-' + version + '-maven')
                    asNode().appendNode('licenses').appendNode('license').with {
                        appendNode('name', 'Apache License, Version 2.0')
                        appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html')
                        appendNode('distribution', 'repo')
                    }
                    asNode().appendNode('issueManagement').with {
                        appendNode('url', 'https://github.com/pcorless/icepdf/issues')
                        appendNode('system', 'Github')
                    }
                }
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

tasks.jar() {
    archiveBaseName.set("${baseJarName}")
    archiveAppendix.set("${baseAppendixName}")
    archiveVersion.set("${VERSION}")
    archiveClassifier.set("${RELEASE_TYPE}")
    manifest {
        attributes('Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')')
        attributes("Implementation-Title": "${archiveBaseName.get() + '-' + archiveAppendix.get()}", "${sectionName}")
        attributes("Implementation-Version": "${VERSION + (RELEASE_TYPE?.trim()? '-' + RELEASE_TYPE:'')}", "${sectionName}")
        attributes("Implementation-Vendor": "${COMPANY}", "${sectionName}")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Assembles a jar archive containing the main classes source code.'
    group = 'Documentation'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    archiveBaseName.set("${baseJarName}")
    archiveAppendix.set("${baseAppendixName}")
    archiveVersion.set("${VERSION}")
    archiveClassifier.set('sources')
    manifest {
        attributes("Implementation-Title": "${archiveBaseName.get() + '-' + archiveAppendix.get()}", "${sectionName}")
        attributes("Implementation-Version": "${VERSION + (RELEASE_TYPE?.trim()? '-' + RELEASE_TYPE:'')}", "${sectionName}")
        attributes("Implementation-Vendor": "${COMPANY}", "${sectionName}")
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc
    archiveClassifier.set('javadoc')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

compileJava {
    doFirst{

        def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"
        def jenkinsRevision = System.getenv("SVN_REVISION") ?: "0"

        copy{
            from 'src/main/resources/org/icepdf/core/application/ProductInfo.java'
            into 'src/main/java/org/icepdf/core/application/'
            filter(org.apache.tools.ant.filters.ReplaceTokens,
                    tokens: [company: COMPANY, product: PRODUCT, version: VERSION, type: RELEASE_TYPE,
                             build: jenkinsBuild, revision: jenkinsRevision])
        }
    }
}

clean {
    doLast{
        file("src/main/java/org/icepdf/core/application/ProductInfo.java").delete()
    }
}